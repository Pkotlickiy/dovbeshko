import { NextResponse } from "next/server"
import { sendTelegramNotification } from "@/lib/telegram-notification"

export async function GET() {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const testMessage = `
üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram.
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString()}
    `

    const sent = await sendTelegramNotification(testMessage)

    if (sent) {
      return NextResponse.json({
        success: true,
        message: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
      })
    } else {
      return NextResponse.json({
        success: false,
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram",
      })
    }
  } catch (error) {
    console.error("Error testing Telegram connection:", error)
    return NextResponse.json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram",
    })
  }
}
