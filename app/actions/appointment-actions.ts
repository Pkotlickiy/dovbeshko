"use server"

import { z } from "zod"
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
import { sendTelegramNotification } from "@/lib/telegram-notification"

// Define the appointment schema for validation
const appointmentSchema = z.object({
  name: z.string().min(2, { message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤" }),
  email: z.string().email({ message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å" }),
  phone: z.string().min(6, { message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" }),
  date: z.string().refine((val) => !isNaN(Date.parse(val)), {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É",
  }),
  time: z.string().regex(/^([0-1]?[0-9]|2[0-2]):[0-5][0-9]$/, {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
  }),
  service: z.string().min(1, { message: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É" }),
  message: z.string().optional(),
})

export type AppointmentFormData = z.infer<typeof appointmentSchema>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function formatAppointmentMessage(data: AppointmentFormData): string {
  const serviceName = getServiceName(data.service)

  return `
üìÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${data.name}
üìß *Email:* ${data.email}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üìÜ *–î–∞—Ç–∞:* ${new Date(data.date).toLocaleDateString("ru-RU")}
üïí *–í—Ä–µ–º—è:* ${data.time}
üîç *–£—Å–ª—É–≥–∞:* ${serviceName}
${data.message ? `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message}` : ""}
  `
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ –∫–æ–¥—É
function getServiceName(serviceCode: string): string {
  const serviceMap: Record<string, string> = {
    criminal: "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
    military: "–í–æ–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ",
    land: "–ó–µ–º–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ",
    consumer: "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π",
    realestate: "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é",
    arbitration: "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–æ",
    inheritance: "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ",
    unjust_enrichment: "–ù–µ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ",
    medical: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
    consultation: "–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
  }

  return serviceMap[serviceCode] || serviceCode
}

// –£–ø—Ä–æ—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é bookAppointment, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
export async function bookAppointment(formData: FormData) {
  // Simulate a delay to mimic server processing
  await new Promise((resolve) => setTimeout(resolve, 1000))

  // Extract and validate form data
  const rawData = {
    name: formData.get("name") as string,
    email: formData.get("email") as string,
    phone: formData.get("phone") as string,
    date: formData.get("date") as string,
    time: formData.get("time") as string,
    service: formData.get("service") as string,
    message: formData.get("message") as string,
  }

  // Validate the data
  const validationResult = appointmentSchema.safeParse(rawData)

  if (!validationResult.success) {
    return {
      success: false,
      errors: validationResult.error.flatten().fieldErrors,
    }
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –∑–¥–µ—Å—å –≤—ã –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  console.log("Appointment booked:", validationResult.data)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  try {
    const message = formatAppointmentMessage(validationResult.data)
    await sendTelegramNotification(message)
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", error)
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
  }

  // Return success response with appointment details
  return {
    success: true,
    data: validationResult.data,
    message: "–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
  }
}
