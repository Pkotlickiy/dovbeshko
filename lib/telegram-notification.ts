/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 */

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramNotification(message: string) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      console.error("Telegram bot token or chat ID not configured")
      return false
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    })

    const data = await response.json()
    return data.ok
  } catch (error) {
    console.error("Error sending Telegram notification:", error)
    return false
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
 * @param data –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatAppointmentMessage(data: any): string {
  const serviceName = getServiceName(data.service)

  return `
üìÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${data.name}
üìß *Email:* ${data.email}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üìÜ *–î–∞—Ç–∞:* ${new Date(data.date).toLocaleDateString("ru-RU")}
üïí *–í—Ä–µ–º—è:* ${data.time}
üîç *–£—Å–ª—É–≥–∞:* ${serviceName}
${data.message ? `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message}` : ""}
  `
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –∫–æ–¥—É
 * @param serviceCode –ö–æ–¥ —É—Å–ª—É–≥–∏
 * @returns –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
 */
export function getServiceName(serviceCode: string): string {
  const serviceMap: Record<string, string> = {
    criminal: "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
    military: "–í–æ–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ",
    land: "–ó–µ–º–µ–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ",
    consumer: "–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π",
    realestate: "–°–¥–µ–ª–∫–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é",
    arbitration: "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–æ",
    inheritance: "–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ",
    unjust_enrichment: "–ù–µ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ",
    medical: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
    consultation: "–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
  }

  return serviceMap[serviceCode] || serviceCode
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram
 * @param data –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendAppointmentNotification(data: any): Promise<boolean> {
  const message = formatAppointmentMessage(data)
  return await sendTelegramNotification(message)
}
