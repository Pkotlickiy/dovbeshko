#!/usr/bin/env node

interface TelegramTestResult {
  success: boolean
  message: string
  details?: any
}

class TelegramTester {
  private botToken: string
  private chatId: string

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || ""
    this.chatId = process.env.TELEGRAM_CHAT_ID || ""
  }

  private async makeRequest(method: string, data?: any): Promise<any> {
    const url = `https://api.telegram.org/bot${this.botToken}/${method}`

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: data ? JSON.stringify(data) : undefined,
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${result.description || "Unknown error"}`)
      }

      return result
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: ${error}`)
    }
  }

  public async checkConfiguration(): Promise<TelegramTestResult> {
    console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram...")

    if (!this.botToken) {
      return {
        success: false,
        message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      }
    }

    if (!this.chatId) {
      return {
        success: false,
        message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if (!this.botToken.match(/^\d+:[A-Za-z0-9_-]+$/)) {
      return {
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN",
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç chat_id
    if (!this.chatId.match(/^-?\d+$/)) {
      return {
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_CHAT_ID",
      }
    }

    return {
      success: true,
      message: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
    }
  }

  public async testConnection(): Promise<TelegramTestResult> {
    console.log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API...")

    try {
      const result = await this.makeRequest("getMe")

      return {
        success: true,
        message: `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: ${result.result.first_name} (@${result.result.username})`,
        details: result.result,
      }
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error}`,
      }
    }
  }

  public async testChatAccess(): Promise<TelegramTestResult> {
    console.log("üí¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É...")

    try {
      const result = await this.makeRequest("getChat", {
        chat_id: this.chatId,
      })

      return {
        success: true,
        message: `–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${result.result.title || result.result.first_name || "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"}`,
        details: result.result,
      }
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: ${error}`,
      }
    }
  }

  public async sendTestMessage(): Promise<TelegramTestResult> {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    const testMessage = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–π—Ç–∞ –∞–¥–≤–æ–∫–∞—Ç–∞
    
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
üîß –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚úÖ –°—Ç–∞—Ç—É—Å: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`

    try {
      const result = await this.makeRequest("sendMessage", {
        chat_id: this.chatId,
        text: testMessage,
        parse_mode: "HTML",
      })

      return {
        success: true,
        message: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
        details: result.result,
      }
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`,
      }
    }
  }

  public async testFormSubmission(): Promise<TelegramTestResult> {
    console.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...")

    const formData = {
      name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      email: "test@example.com",
      phone: "+7 (999) 123-45-67",
      subject: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
      message: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.",
    }

    const message = `üìù –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: ${formData.name}
üìß Email: ${formData.email}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìã –¢–µ–º–∞: ${formData.subject}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${formData.message}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
üîß –¢–∏–ø: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`

    try {
      const result = await this.makeRequest("sendMessage", {
        chat_id: this.chatId,
        text: message,
        parse_mode: "HTML",
      })

      return {
        success: true,
        message: "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        details: result.result,
      }
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: ${error}`,
      }
    }
  }

  public async runAllTests(): Promise<{
    overall: boolean
    results: { [key: string]: TelegramTestResult }
  }> {
    const results: { [key: string]: TelegramTestResult } = {}

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    results.configuration = await this.checkConfiguration()
    if (!results.configuration.success) {
      return { overall: false, results }
    }

    // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    results.connection = await this.testConnection()
    if (!results.connection.success) {
      return { overall: false, results }
    }

    // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
    results.chatAccess = await this.testChatAccess()
    if (!results.chatAccess.success) {
      return { overall: false, results }
    }

    // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    results.testMessage = await this.sendTestMessage()

    // –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã
    results.formSubmission = await this.testFormSubmission()

    const overall = Object.values(results).every((r) => r.success)

    return { overall, results }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function formatResults(overall: boolean, results: { [key: string]: TelegramTestResult }) {
  console.log("\n" + "=".repeat(60))
  console.log("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM")
  console.log("=".repeat(60))

  // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
  const statusIcon = overall ? "‚úÖ" : "‚ùå"
  const statusText = overall ? "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´" : "–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´"
  console.log(`\n${statusIcon} ${statusText}`)

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

  const testNames = {
    configuration: "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
    connection: "üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
    chatAccess: "üí¨ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É",
    testMessage: "üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    formSubmission: "üìã –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã",
  }

  for (const [key, result] of Object.entries(results)) {
    const icon = result.success ? "‚úÖ" : "‚ùå"
    const testName = testNames[key as keyof typeof testNames] || key
    console.log(`   ${icon} ${testName}: ${result.message}`)

    if (result.details && result.success) {
      if (key === "connection" && result.details.username) {
        console.log(`      ‚îî‚îÄ –ë–æ—Ç: @${result.details.username}`)
      }
      if (key === "chatAccess" && result.details.title) {
        console.log(`      ‚îî‚îÄ –ß–∞—Ç: ${result.details.title}`)
      }
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

  if (!overall) {
    console.log("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")

    if (!results.configuration?.success) {
      console.log("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID")
    }

    if (!results.connection?.success) {
      console.log("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
    }

    if (!results.chatAccess?.success) {
      console.log("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    }
  } else {
    console.log("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    console.log("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
    console.log("   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ Telegram API")
  }

  console.log("\n" + "=".repeat(60))
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  try {
    const tester = new TelegramTester()
    const { overall, results } = await tester.runAllTests()

    formatResults(overall, results)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    process.exit(overall ? 0 : 1)
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram:", error)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

export { TelegramTester, type TelegramTestResult }
