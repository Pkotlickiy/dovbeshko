#!/usr/bin/env node

import { SEOAuditor, type SEOAuditResult } from "./seo-audit"
import { TelegramTester, type TelegramTestResult } from "./telegram-test"

interface HealthCheckResult {
  overall: {
    score: number
    status: "excellent" | "good" | "fair" | "poor"
    critical_issues: number
  }
  seo: SEOAuditResult
  telegram: {
    working: boolean
    results: { [key: string]: TelegramTestResult }
  }
  recommendations: string[]
}

class WebsiteHealthChecker {
  public async runFullCheck(): Promise<HealthCheckResult> {
    console.log("üè• –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∞–π—Ç–∞...\n")

    // SEO –∞—É–¥–∏—Ç
    console.log("1Ô∏è‚É£ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ SEO –∞—É–¥–∏—Ç–∞...")
    const seoAuditor = new SEOAuditor()
    const seoResult = await seoAuditor.runAudit()

    // Telegram —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    const telegramTester = new TelegramTester()
    const { overall: telegramWorking, results: telegramResults } = await telegramTester.runAllTests()

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    const seoWeight = 0.7
    const telegramWeight = 0.3
    const telegramScore = telegramWorking ? 100 : 0
    const overallScore = Math.round(seoResult.score * seoWeight + telegramScore * telegramWeight)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    let status: "excellent" | "good" | "fair" | "poor"
    if (overallScore >= 90) status = "excellent"
    else if (overallScore >= 75) status = "good"
    else if (overallScore >= 60) status = "fair"
    else status = "poor"

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const criticalIssues = seoResult.summary.errors + (telegramWorking ? 0 : 1)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRecommendations(seoResult, telegramWorking, overallScore)

    return {
      overall: {
        score: overallScore,
        status,
        critical_issues: criticalIssues,
      },
      seo: seoResult,
      telegram: {
        working: telegramWorking,
        results: telegramResults,
      },
      recommendations,
    }
  }

  private generateRecommendations(seoResult: SEOAuditResult, telegramWorking: boolean, overallScore: number): string[] {
    const recommendations: string[] = []

    // SEO —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (seoResult.summary.errors > 0) {
      recommendations.push(`–ò—Å–ø—Ä–∞–≤—å—Ç–µ ${seoResult.summary.errors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö SEO –æ—à–∏–±–æ–∫`)
    }

    if (seoResult.summary.warnings > 5) {
      recommendations.push(`–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ ${seoResult.summary.warnings} SEO –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`)
    }

    // Telegram —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!telegramWorking) {
      recommendations.push("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–ª—É
    if (overallScore < 60) {
      recommendations.push("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞")
    } else if (overallScore < 80) {
      recommendations.push("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å SEO –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const hasMetadataIssues = seoResult.issues.some((i) => i.category === "Metadata" && i.type === "error")
    if (hasMetadataIssues) {
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    }

    const hasImageIssues = seoResult.issues.some((i) => i.category === "Images" && i.type === "error")
    if (hasImageIssues) {
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ alt –∞—Ç—Ä–∏–±—É—Ç—ã –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")
    }

    const hasStructuredDataIssues = seoResult.issues.some((i) => i.category === "Structured Data" && i.type === "error")
    if (hasStructuredDataIssues) {
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ Schema.org —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    if (recommendations.length === 0) {
      recommendations.push("–°–∞–π—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
      recommendations.push("–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
    }

    return recommendations
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function formatHealthCheckResults(result: HealthCheckResult) {
  console.log("\n" + "=".repeat(70))
  console.log("üè• –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ê–ô–¢–ê")
  console.log("=".repeat(70))

  // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
  const statusIcons = {
    excellent: "üü¢",
    good: "üü°",
    fair: "üü†",
    poor: "üî¥",
  }

  const statusTexts = {
    excellent: "–û–¢–õ–ò–ß–ù–û",
    good: "–•–û–†–û–®–û",
    fair: "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û",
    poor: "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø",
  }

  console.log(`\n${statusIcons[result.overall.status]} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${statusTexts[result.overall.status]}`)
  console.log(`üìä –û–±—â–∏–π –±–∞–ª–ª: ${result.overall.score}/100`)
  console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${result.overall.critical_issues}`)

  // SEO —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`\nüîç SEO –ê—É–¥–∏—Ç:`)
  console.log(`   üìä –ë–∞–ª–ª: ${result.seo.score}/100`)
  console.log(`   üî¥ –û—à–∏–±–∫–∏: ${result.seo.summary.errors}`)
  console.log(`   üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.seo.summary.warnings}`)
  console.log(`   üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${result.seo.summary.info}`)

  // Telegram —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const telegramIcon = result.telegram.working ? "‚úÖ" : "‚ùå"
  const telegramStatus = result.telegram.working ? "–†–∞–±–æ—Ç–∞–µ—Ç" : "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
  console.log(`\nü§ñ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${telegramIcon} ${telegramStatus}`)

  // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã
  const topIssues = result.seo.issues.filter((i) => i.type === "error").slice(0, 5)

  if (topIssues.length > 0) {
    console.log(`\nüö® –¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã:`)
    topIssues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue.message} ${issue.file ? `(${issue.file})` : ""}`)
    })
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`)
  result.recommendations.forEach((rec, index) => {
    console.log(`   ${index + 1}. ${rec}`)
  })

  // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
  console.log(`\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`)

  if (result.overall.critical_issues > 0) {
    console.log(`   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ ${result.overall.critical_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º`)
    console.log(`   2. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`)
  } else {
    console.log(`   1. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞`)
    console.log(`   2. –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)`)
  }

  console.log(`   3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ SEO —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`)
  console.log(`   4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º`)

  console.log("\n" + "=".repeat(70))
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  try {
    const healthChecker = new WebsiteHealthChecker()
    const result = await healthChecker.runFullCheck()

    formatHealthCheckResults(result)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const exitCode = result.overall.critical_issues > 0 ? 1 : 0
    process.exit(exitCode)
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∞–π—Ç–∞:", error)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

export { WebsiteHealthChecker, type HealthCheckResult }
