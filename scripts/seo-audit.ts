#!/usr/bin/env node

import { readFileSync, readdirSync, statSync } from "fs"
import { join } from "path"

interface SEOIssue {
  type: "error" | "warning" | "info"
  category: string
  message: string
  file?: string
  line?: number
}

interface SEOAuditResult {
  score: number
  issues: SEOIssue[]
  summary: {
    errors: number
    warnings: number
    info: number
  }
}

class SEOAuditor {
  private issues: SEOIssue[] = []
  private projectRoot: string

  constructor() {
    this.projectRoot = process.cwd()
  }

  private addIssue(type: SEOIssue["type"], category: string, message: string, file?: string, line?: number) {
    this.issues.push({ type, category, message, file, line })
  }

  private scanDirectory(dir: string, extensions: string[] = [".tsx", ".ts", ".js", ".jsx"]): string[] {
    const files: string[] = []

    try {
      const items = readdirSync(dir)

      for (const item of items) {
        const fullPath = join(dir, item)
        const stat = statSync(fullPath)

        if (stat.isDirectory() && !item.startsWith(".") && item !== "node_modules") {
          files.push(...this.scanDirectory(fullPath, extensions))
        } else if (stat.isFile() && extensions.some((ext) => item.endsWith(ext))) {
          files.push(fullPath)
        }
      }
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}:`, error)
    }

    return files
  }

  private checkMetadata() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º layout.tsx
    try {
      const layoutPath = join(this.projectRoot, "app", "layout.tsx")
      const layoutContent = readFileSync(layoutPath, "utf-8")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      if (!layoutContent.includes("title:")) {
        this.addIssue("error", "Metadata", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title –≤ layout.tsx", "app/layout.tsx")
      }

      if (!layoutContent.includes("description:")) {
        this.addIssue("error", "Metadata", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç description –≤ layout.tsx", "app/layout.tsx")
      }

      if (!layoutContent.includes("keywords:")) {
        this.addIssue("warning", "Metadata", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç keywords –≤ layout.tsx", "app/layout.tsx")
      }

      if (!layoutContent.includes("openGraph:")) {
        this.addIssue("warning", "Metadata", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OpenGraph —Ä–∞–∑–º–µ—Ç–∫–∞", "app/layout.tsx")
      }
    } catch (error) {
      this.addIssue("error", "Metadata", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª app/layout.tsx")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const pageFiles = this.scanDirectory(join(this.projectRoot, "app")).filter(
      (file) => file.endsWith("page.tsx") || file.endsWith("page.ts"),
    )

    for (const pageFile of pageFiles) {
      try {
        const content = readFileSync(pageFile, "utf-8")
        const relativePath = pageFile.replace(this.projectRoot, "").substring(1)

        if (!content.includes("export const metadata") && !content.includes("generateMetadata")) {
          this.addIssue("warning", "Metadata", `–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö`, relativePath)
        }
      } catch (error) {
        this.addIssue("error", "Metadata", `–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${pageFile}`)
      }
    }
  }

  private checkStructuredData() {
    console.log("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    const files = this.scanDirectory(this.projectRoot)
    let hasStructuredData = false

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")
        const relativePath = file.replace(this.projectRoot, "").substring(1)

        if (content.includes("@context") && content.includes("schema.org")) {
          hasStructuredData = true
          this.addIssue("info", "Structured Data", `–ù–∞–π–¥–µ–Ω–∞ Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞`, relativePath)
        }

        if (content.includes("LocalBusiness")) {
          this.addIssue("info", "Structured Data", `–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–∞ LocalBusiness`, relativePath)
        }

        if (content.includes("Attorney")) {
          this.addIssue("info", "Structured Data", `–ù–∞–π–¥–µ–Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–∞ Attorney`, relativePath)
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    if (!hasStructuredData) {
      this.addIssue("error", "Structured Data", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞")
    }
  }

  private checkImages() {
    console.log("üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

    const files = this.scanDirectory(this.projectRoot)

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")
        const relativePath = file.replace(this.projectRoot, "").substring(1)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º img —Ç–µ–≥–∏ –±–µ–∑ alt
        const imgMatches = content.match(/<img[^>]*>/g)
        if (imgMatches) {
          for (const img of imgMatches) {
            if (!img.includes("alt=")) {
              this.addIssue("error", "Images", `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç–∞`, relativePath)
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ alt
        const imageMatches = content.match(/<Image[^>]*>/g)
        if (imageMatches) {
          for (const image of imageMatches) {
            if (!image.includes("alt=")) {
              this.addIssue("error", "Images", `Image –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç–∞`, relativePath)
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }
  }

  private checkInternalLinks() {
    console.log("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫...")

    const files = this.scanDirectory(this.projectRoot)
    let hasNavigation = false

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")
        const relativePath = file.replace(this.projectRoot, "").substring(1)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (content.includes("nav") || content.includes("Navigation")) {
          hasNavigation = true
          this.addIssue("info", "Navigation", `–ù–∞–π–¥–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è`, relativePath)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Link –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const linkMatches = content.match(/<Link[^>]*href=["']([^"']*)/g)
        if (linkMatches) {
          for (const link of linkMatches) {
            const href = link.match(/href=["']([^"']*)/)?.[1]
            if (href && href.startsWith("http") && !href.includes(process.env.NEXT_PUBLIC_BASE_URL || "")) {
              this.addIssue("info", "Links", `–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞: ${href}`, relativePath)
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    if (!hasNavigation) {
      this.addIssue("warning", "Navigation", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è")
    }
  }

  private checkPerformance() {
    console.log("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º next.config.js
    try {
      const configPath = join(this.projectRoot, "next.config.mjs")
      const configContent = readFileSync(configPath, "utf-8")

      if (!configContent.includes("images:")) {
        this.addIssue("warning", "Performance", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ next.config.mjs")
      }

      if (!configContent.includes("compress:")) {
        this.addIssue("info", "Performance", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å —Å–∂–∞—Ç–∏–µ –≤ next.config.mjs")
      }
    } catch (error) {
      this.addIssue("warning", "Performance", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª next.config.mjs")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    const files = this.scanDirectory(this.projectRoot)
    let hasDynamicImports = false

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")

        if (content.includes("dynamic(") || content.includes("lazy(")) {
          hasDynamicImports = true
          break
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    if (!hasDynamicImports) {
      this.addIssue("info", "Performance", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    }
  }

  private checkMobileOptimization() {
    console.log("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewport –≤ layout.tsx
    try {
      const layoutPath = join(this.projectRoot, "app", "layout.tsx")
      const layoutContent = readFileSync(layoutPath, "utf-8")

      if (!layoutContent.includes("viewport") && !layoutContent.includes("width=device-width")) {
        this.addIssue("error", "Mobile", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç viewport meta tag")
      }
    } catch (error) {
      this.addIssue("error", "Mobile", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª app/layout.tsx")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ responsive –∫–ª–∞—Å—Å–æ–≤
    const files = this.scanDirectory(this.projectRoot)
    let hasResponsiveClasses = false

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")

        if (content.includes("md:") || content.includes("lg:") || content.includes("sm:")) {
          hasResponsiveClasses = true
          break
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    if (!hasResponsiveClasses) {
      this.addIssue("warning", "Mobile", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã responsive CSS –∫–ª–∞—Å—Å—ã")
    }
  }

  private checkSEOFiles() {
    console.log("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO —Ñ–∞–π–ª–æ–≤...")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º robots.txt
    try {
      const robotsPath = join(this.projectRoot, "app", "robots.ts")
      readFileSync(robotsPath, "utf-8")
      this.addIssue("info", "SEO Files", "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª robots.ts")
    } catch (error) {
      this.addIssue("warning", "SEO Files", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª robots.ts")
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º sitemap
    try {
      const sitemapPath = join(this.projectRoot, "app", "sitemap.ts")
      readFileSync(sitemapPath, "utf-8")
      this.addIssue("info", "SEO Files", "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª sitemap.ts")
    } catch (error) {
      this.addIssue("warning", "SEO Files", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª sitemap.ts")
    }
  }

  private checkHeadingStructure() {
    console.log("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")

    const files = this.scanDirectory(this.projectRoot)

    for (const file of files) {
      try {
        const content = readFileSync(file, "utf-8")
        const relativePath = file.replace(this.projectRoot, "").substring(1)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ H1
        const h1Matches = content.match(/<h1[^>]*>|className="[^"]*text-[^"]*xl[^"]*"/g)
        if (h1Matches && h1Matches.length > 1) {
          this.addIssue("warning", "Headings", `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`, relativePath)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headingMatches = content.match(/<h[1-6][^>]*>/g)
        if (headingMatches) {
          const levels = headingMatches.map((h) => Number.parseInt(h.match(/h([1-6])/)?.[1] || "1"))
          for (let i = 1; i < levels.length; i++) {
            if (levels[i] - levels[i - 1] > 1) {
              this.addIssue("warning", "Headings", `–ù–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`, relativePath)
              break
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }
  }

  public async runAudit(): Promise<SEOAuditResult> {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ SEO –∞—É–¥–∏—Ç–∞...\n")

    this.checkMetadata()
    this.checkStructuredData()
    this.checkImages()
    this.checkInternalLinks()
    this.checkPerformance()
    this.checkMobileOptimization()
    this.checkSEOFiles()
    this.checkHeadingStructure()

    const summary = {
      errors: this.issues.filter((i) => i.type === "error").length,
      warnings: this.issues.filter((i) => i.type === "warning").length,
      info: this.issues.filter((i) => i.type === "info").length,
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    const maxScore = 100
    const errorPenalty = summary.errors * 10
    const warningPenalty = summary.warnings * 5
    const score = Math.max(0, maxScore - errorPenalty - warningPenalty)

    return {
      score,
      issues: this.issues,
      summary,
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function formatResults(result: SEOAuditResult) {
  console.log("\n" + "=".repeat(60))
  console.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ SEO –ê–£–î–ò–¢–ê")
  console.log("=".repeat(60))

  // –û–±—â–∏–π –±–∞–ª–ª
  const scoreColor = result.score >= 80 ? "üü¢" : result.score >= 60 ? "üü°" : "üî¥"
  console.log(`\n${scoreColor} –û–±—â–∏–π –±–∞–ª–ª: ${result.score}/100`)

  // –°–≤–æ–¥–∫–∞
  console.log(`\nüìà –°–≤–æ–¥–∫–∞:`)
  console.log(`   üî¥ –û—à–∏–±–∫–∏: ${result.summary.errors}`)
  console.log(`   üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.summary.warnings}`)
  console.log(`   üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${result.summary.info}`)

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categories = [...new Set(result.issues.map((i) => i.category))]

  for (const category of categories) {
    const categoryIssues = result.issues.filter((i) => i.category === category)
    console.log(`\nüìÇ ${category}:`)

    for (const issue of categoryIssues) {
      const icon = issue.type === "error" ? "üî¥" : issue.type === "warning" ? "üü°" : "üîµ"
      const fileInfo = issue.file ? ` (${issue.file})` : ""
      console.log(`   ${icon} ${issue.message}${fileInfo}`)
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`)

  if (result.summary.errors > 0) {
    console.log(`   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ ${result.summary.errors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫`)
  }

  if (result.summary.warnings > 5) {
    console.log(`   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ ${result.summary.warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`)
  }

  if (result.score < 80) {
    console.log(`   ‚Ä¢ –£–ª—É—á—à–∏—Ç–µ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–∞–ª–ª–∞`)
  }

  console.log(`   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ SEO –∞—É–¥–∏—Ç`)
  console.log(`   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤`)

  console.log("\n" + "=".repeat(60))
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
async function main() {
  try {
    const auditor = new SEOAuditor()
    const result = await auditor.runAudit()
    formatResults(result)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    process.exit(result.summary.errors > 0 ? 1 : 0)
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SEO –∞—É–¥–∏—Ç–∞:", error)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

export { SEOAuditor, type SEOAuditResult, type SEOIssue }
